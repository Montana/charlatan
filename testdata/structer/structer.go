// generated by "charlatan -dir=testdata/structer -output=testdata/structer/structer.go Structer".  DO NOT EDIT.

package main

import (
	"reflect"
	"testing"
)

// StructInvocation represents a single call of FakeStructer.Struct
type StructInvocation struct {
	Parameters struct {
		Ident1 struct {
			a string
			b string
		}
	}
	Results struct {
		Ident2 struct {
			c string
			d string
		}
	}
}

// NamedStructInvocation represents a single call of FakeStructer.NamedStruct
type NamedStructInvocation struct {
	Parameters struct {
		A struct {
			a string
			b string
		}
	}
	Results struct {
		Z struct {
			c string
			d string
		}
	}
}

/*
FakeStructer is a mock implementation of Structer for testing.
Use it in your tests as in this example:

	package example

	func TestWithStructer(t *testing.T) {
		f := &main.FakeStructer{
			StructHook: func(ident1 struct {
	a string
	b string
}) (ident2 struct {
	c string
	d string
}) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeStruct ...
		f.AssertStructCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeStruct.
*/
type FakeStructer struct {
	StructHook func(struct {
		a string
		b string
	}) struct {
		c string
		d string
	}
	NamedStructHook func(struct {
		a string
		b string
	}) struct {
		c string
		d string
	}

	StructCalls      []*StructInvocation
	NamedStructCalls []*NamedStructInvocation
}

// NewFakeStructerDefaultPanic returns an instance of FakeStructer with all hooks configured to panic
func NewFakeStructerDefaultPanic() *FakeStructer {
	return &FakeStructer{
		StructHook: func(struct {
			a string
			b string
		}) (ident2 struct {
			c string
			d string
		}) {
			panic("Unexpected call to Structer.Struct")
		},
		NamedStructHook: func(struct {
			a string
			b string
		}) (z struct {
			c string
			d string
		}) {
			panic("Unexpected call to Structer.NamedStruct")
		},
	}
}

// NewFakeStructerDefaultFatal returns an instance of FakeStructer with all hooks configured to call t.Fatal
func NewFakeStructerDefaultFatal(t *testing.T) *FakeStructer {
	return &FakeStructer{
		StructHook: func(struct {
			a string
			b string
		}) (ident2 struct {
			c string
			d string
		}) {
			t.Fatal("Unexpected call to Structer.Struct")
			return
		},
		NamedStructHook: func(struct {
			a string
			b string
		}) (z struct {
			c string
			d string
		}) {
			t.Fatal("Unexpected call to Structer.NamedStruct")
			return
		},
	}
}

// NewFakeStructerDefaultError returns an instance of FakeStructer with all hooks configured to call t.Error
func NewFakeStructerDefaultError(t *testing.T) *FakeStructer {
	return &FakeStructer{
		StructHook: func(struct {
			a string
			b string
		}) (ident2 struct {
			c string
			d string
		}) {
			t.Error("Unexpected call to Structer.Struct")
			return
		},
		NamedStructHook: func(struct {
			a string
			b string
		}) (z struct {
			c string
			d string
		}) {
			t.Error("Unexpected call to Structer.NamedStruct")
			return
		},
	}
}

func (f *FakeStructer) Reset() {
	f.StructCalls = []*StructInvocation{}
	f.NamedStructCalls = []*NamedStructInvocation{}
}

func (_f1 *FakeStructer) Struct(ident1 struct {
	a string
	b string
}) (ident2 struct {
	c string
	d string
}) {
	invocation := new(StructInvocation)

	invocation.Parameters.Ident1 = ident1

	ident2 = _f1.StructHook(ident1)

	invocation.Results.Ident2 = ident2

	_f1.StructCalls = append(_f1.StructCalls, invocation)

	return
}

// StructCalled returns true if FakeStructer.Struct was called
func (f *FakeStructer) StructCalled() bool {
	return len(f.StructCalls) != 0
}

// AssertStructCalled calls t.Error if FakeStructer.Struct was not called
func (f *FakeStructer) AssertStructCalled(t *testing.T) {
	t.Helper()
	if len(f.StructCalls) == 0 {
		t.Error("FakeStructer.Struct not called, expected at least one")
	}
}

// StructNotCalled returns true if FakeStructer.Struct was not called
func (f *FakeStructer) StructNotCalled() bool {
	return len(f.StructCalls) == 0
}

// AssertStructNotCalled calls t.Error if FakeStructer.Struct was called
func (f *FakeStructer) AssertStructNotCalled(t *testing.T) {
	t.Helper()
	if len(f.StructCalls) != 0 {
		t.Error("FakeStructer.Struct called, expected none")
	}
}

// StructCalledOnce returns true if FakeStructer.Struct was called exactly once
func (f *FakeStructer) StructCalledOnce() bool {
	return len(f.StructCalls) == 1
}

// AssertStructCalledOnce calls t.Error if FakeStructer.Struct was not called exactly once
func (f *FakeStructer) AssertStructCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.StructCalls) != 1 {
		t.Errorf("FakeStructer.Struct called %d times, expected 1", len(f.StructCalls))
	}
}

// StructCalledN returns true if FakeStructer.Struct was called at least n times
func (f *FakeStructer) StructCalledN(n int) bool {
	return len(f.StructCalls) >= n
}

// AssertStructCalledN calls t.Error if FakeStructer.Struct was called less than n times
func (f *FakeStructer) AssertStructCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.StructCalls) < n {
		t.Errorf("FakeStructer.Struct called %d times, expected >= %d", len(f.StructCalls), n)
	}
}

// StructCalledWith returns true if FakeStructer.Struct was called with the given values
func (_f2 *FakeStructer) StructCalledWith(ident1 struct {
	a string
	b string
}) (found bool) {
	for _, call := range _f2.StructCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	return
}

// AssertStructCalledWith calls t.Error if FakeStructer.Struct was not called with the given values
func (_f3 *FakeStructer) AssertStructCalledWith(t *testing.T, ident1 struct {
	a string
	b string
}) {
	t.Helper()
	var found bool
	for _, call := range _f3.StructCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeStructer.Struct not called with expected parameters")
	}
}

// StructCalledOnceWith returns true if FakeStructer.Struct was called exactly once with the given values
func (_f4 *FakeStructer) StructCalledOnceWith(ident1 struct {
	a string
	b string
}) bool {
	var count int
	for _, call := range _f4.StructCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	return count == 1
}

// AssertStructCalledOnceWith calls t.Error if FakeStructer.Struct was not called exactly once with the given values
func (_f5 *FakeStructer) AssertStructCalledOnceWith(t *testing.T, ident1 struct {
	a string
	b string
}) {
	t.Helper()
	var count int
	for _, call := range _f5.StructCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeStructer.Struct called %d times with expected parameters, expected one", count)
	}
}

// StructResultsForCall returns the result values for the first call to FakeStructer.Struct with the given values
func (_f6 *FakeStructer) StructResultsForCall(ident1 struct {
	a string
	b string
}) (ident2 struct {
	c string
	d string
}, found bool) {
	for _, call := range _f6.StructCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			ident2 = call.Results.Ident2
			found = true
			break
		}
	}

	return
}

func (_f7 *FakeStructer) NamedStruct(a struct {
	a string
	b string
}) (z struct {
	c string
	d string
}) {
	invocation := new(NamedStructInvocation)

	invocation.Parameters.A = a

	z = _f7.NamedStructHook(a)

	invocation.Results.Z = z

	_f7.NamedStructCalls = append(_f7.NamedStructCalls, invocation)

	return
}

// NamedStructCalled returns true if FakeStructer.NamedStruct was called
func (f *FakeStructer) NamedStructCalled() bool {
	return len(f.NamedStructCalls) != 0
}

// AssertNamedStructCalled calls t.Error if FakeStructer.NamedStruct was not called
func (f *FakeStructer) AssertNamedStructCalled(t *testing.T) {
	t.Helper()
	if len(f.NamedStructCalls) == 0 {
		t.Error("FakeStructer.NamedStruct not called, expected at least one")
	}
}

// NamedStructNotCalled returns true if FakeStructer.NamedStruct was not called
func (f *FakeStructer) NamedStructNotCalled() bool {
	return len(f.NamedStructCalls) == 0
}

// AssertNamedStructNotCalled calls t.Error if FakeStructer.NamedStruct was called
func (f *FakeStructer) AssertNamedStructNotCalled(t *testing.T) {
	t.Helper()
	if len(f.NamedStructCalls) != 0 {
		t.Error("FakeStructer.NamedStruct called, expected none")
	}
}

// NamedStructCalledOnce returns true if FakeStructer.NamedStruct was called exactly once
func (f *FakeStructer) NamedStructCalledOnce() bool {
	return len(f.NamedStructCalls) == 1
}

// AssertNamedStructCalledOnce calls t.Error if FakeStructer.NamedStruct was not called exactly once
func (f *FakeStructer) AssertNamedStructCalledOnce(t *testing.T) {
	t.Helper()
	if len(f.NamedStructCalls) != 1 {
		t.Errorf("FakeStructer.NamedStruct called %d times, expected 1", len(f.NamedStructCalls))
	}
}

// NamedStructCalledN returns true if FakeStructer.NamedStruct was called at least n times
func (f *FakeStructer) NamedStructCalledN(n int) bool {
	return len(f.NamedStructCalls) >= n
}

// AssertNamedStructCalledN calls t.Error if FakeStructer.NamedStruct was called less than n times
func (f *FakeStructer) AssertNamedStructCalledN(t *testing.T, n int) {
	t.Helper()
	if len(f.NamedStructCalls) < n {
		t.Errorf("FakeStructer.NamedStruct called %d times, expected >= %d", len(f.NamedStructCalls), n)
	}
}

// NamedStructCalledWith returns true if FakeStructer.NamedStruct was called with the given values
func (_f8 *FakeStructer) NamedStructCalledWith(a struct {
	a string
	b string
}) (found bool) {
	for _, call := range _f8.NamedStructCalls {
		if reflect.DeepEqual(call.Parameters.A, a) {
			found = true
			break
		}
	}

	return
}

// AssertNamedStructCalledWith calls t.Error if FakeStructer.NamedStruct was not called with the given values
func (_f9 *FakeStructer) AssertNamedStructCalledWith(t *testing.T, a struct {
	a string
	b string
}) {
	t.Helper()
	var found bool
	for _, call := range _f9.NamedStructCalls {
		if reflect.DeepEqual(call.Parameters.A, a) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeStructer.NamedStruct not called with expected parameters")
	}
}

// NamedStructCalledOnceWith returns true if FakeStructer.NamedStruct was called exactly once with the given values
func (_f10 *FakeStructer) NamedStructCalledOnceWith(a struct {
	a string
	b string
}) bool {
	var count int
	for _, call := range _f10.NamedStructCalls {
		if reflect.DeepEqual(call.Parameters.A, a) {
			count++
		}
	}

	return count == 1
}

// AssertNamedStructCalledOnceWith calls t.Error if FakeStructer.NamedStruct was not called exactly once with the given values
func (_f11 *FakeStructer) AssertNamedStructCalledOnceWith(t *testing.T, a struct {
	a string
	b string
}) {
	t.Helper()
	var count int
	for _, call := range _f11.NamedStructCalls {
		if reflect.DeepEqual(call.Parameters.A, a) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeStructer.NamedStruct called %d times with expected parameters, expected one", count)
	}
}

// NamedStructResultsForCall returns the result values for the first call to FakeStructer.NamedStruct with the given values
func (_f12 *FakeStructer) NamedStructResultsForCall(a struct {
	a string
	b string
}) (z struct {
	c string
	d string
}, found bool) {
	for _, call := range _f12.NamedStructCalls {
		if reflect.DeepEqual(call.Parameters.A, a) {
			z = call.Results.Z
			found = true
			break
		}
	}

	return
}
